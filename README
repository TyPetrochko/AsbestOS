List here the following info:
1. who you have worked with; 
2. whether you coded this assignment together, and if not, who worked on which part;
3. brief description of what you have implemented;
4. and anything else you would like us to know.

Alex Ringlen and Tyler Petrochko completed this lab as partners. We chose project 1, video mode. For our demo, we implemented Conway's Game of Life. (https://en.wikipedia.org/wiki/Conway's_Game_of_Life)

Tyler worked on enabling video mode in the bootloader, displaying data to the screen, and displaying the console text to the screen while not in "video mode." Alex worked on writing the syscalls necessary to map the VGA buffer/toggle video mode, set the frame to draw in, and accept keyboard input without blocking. He also worked on the implementation of Conway's Game of Life. 

Our kernel-side video mode implementation is in video.c and video.h in kern/dev. The necessary syscalls are located in kern/fs/sysfile.c (as well as a number of related files), while our implementation of the shell and the Game of Life is located in user/pingpong/ping.c.

Conway's Game of Life can be run from the shell using the command "life". Within the game there exists a setup phase in which the player can move a cursor and place blocks, as well as a simulation phase in which the board continuously evolves based on the rules of the game: a block which is alive and has 2 or 3 neighbors lives on, while a block which is dead (not colored) lives if it has exactly three neighbors. The controls are displayed in a help menu in game, but I have written them below as well:

-- Setup Phase --
WASD - Move cursor
P - Place cell
R - Remove cell
T - Toggle cell
G - Start Simulation
H - Toggle Help Menu
B - Quit Game

-- Simulation Phase --
B - Pause and go to Setup Phase

Outside of the Game of Life, we implemented a few other auxillary commands for the shell to test the color system and the video mode switch:

video - toggle video mode on (clears the console screen)
novideo - toggle video mode off (console reappears and colors are cleared)
draw0, draw1, draw2, draw3 -- fill the screen with color in the given plane

From these you can confirm that the video mode works as intended, that all the colors can be drawn once in video mode, and that the vga buffer is unmapped once the video mode is toggled off (calling the draw functions in console mode has no effect.)
